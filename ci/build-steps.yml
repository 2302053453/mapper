# This file is part of OpenOrienteering.

# Copyright 2019 Kai Pastor
#
# Redistribution and use is allowed according to the terms of the BSD license:
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 
# 1. Redistributions of source code must retain the copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. The name of the author may not be used to endorse or promote products 
#    derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

parameters:
  cmakeArgs: '-DCMAKE_BUILD_TYPE=Release'
  imageName: ''
  targetSuffix: ''
  toolchainTargets: 'default-toolchain'
  mode: ''


steps:
- task: DownloadPipelineArtifact@0
  inputs:
    pipelineId: $(openorienteering.superbuild.pipelineId)
    artifactName: 'superbuild-${{ parameters.imageName }}${{ parameters.targetSuffix }}'
    targetPath: $(Build.SourcesDirectory)/build/default/install
  displayName: 'Download superbuild artifacts'

- bash: find $(Build.SourcesDirectory)/build/default/install
  displayName: 'List superbuild artifacts'

- bash: |
    set -x
    set -e
    chmod +x $(Build.SourcesDirectory)/build/default/install/bin/*
    case "${{ parameters.imageName }}${{ parameters.targetSuffix }}" in
      ubuntu-*-x86_64-w64-mingw32)
        sudo apt-get update
        sudo apt-get install doxygen graphviz python-lxml g++-mingw-w64-x86-64
        chmod +x $(Build.SourcesDirectory)/build/default/install/x86_64-w64-mingw32/toolchain/bin/*
        ;;
      ubuntu-*)
        sudo apt-get update
        sudo apt-get install doxygen graphviz python-lxml
        case "${{ parameters.mode }}" in
          clazy)
            curl https://downloads.kdab.com/clazy/1.5/Clazy-x86_64-1.5.AppImage -o clazy
            sha256sum clazy | grep e6ca38fb1e31ca5240489bfb653ec0ef8dbeb8ef5957d73400ea1e5c3d0303a6
            sudo cp clazy /usr/local/bin/
            sudo chmod +x /usr/local/bin/clazy
            echo "##vso[task.setVariable variable=CXX]/usr/local/bin/clazy"
            ;;
        esac
        ;;
      macos-*-arm-linux-androideabi)
        sudo xcode-select -s /Applications/Xcode_10.1.app/Contents/Developer
        xcode-select --print-path
        pip install lxml
        chmod +x $(Build.SourcesDirectory)/build/default/install/arm-linux-androideabi/toolchain/bin/*
        ;;
      macos-*)
        sudo xcode-select -s /Applications/Xcode_10.1.app/Contents/Developer
        xcode-select --print-path
        pip install lxml
        ;;
    esac
  displayName: 'Prepare build tools'

- bash: |
    set -x
    set -e
    git clone --branch master --depth 1 https://github.com/openorienteering/superbuild.git
    test -f superbuild/ci/num_jobs.cmake && cp superbuild/ci/num_jobs.cmake superbuild/
    cp $(Build.SourcesDirectory)/ci/openorienteering-mapper-ci.cmake superbuild/
  displayName: 'Checkout superbuild source'

- task: CMake@1
  inputs:
    workingDirectory: 'build'
    cmakeArgs: >
      $(Build.SourcesDirectory)/superbuild
      "-DSUPERBUILD_DISABLE_DEPENDENCIES=TRUE"
      "-DMapper_CI_SOURCE_DIR=$(Build.SourcesDirectory)"
      "-DMapper_CI_VERSION_DISPLAY=$(Build.SourceBranch) $(Build.SourceVersion)"
      "-DMapper_CI_QT_VERSION=$(openorienteering.mapper.qt.version)"
      "-DMapper_CI_LICENSING_PROVIDER=$(openorienteering.mapper.licensing.provider)"
      "-DMapper_CI_ENABLE_POSITIONING=$(openorienteering.mapper.positioning.enabled)"
      ${{ parameters.cmakeArgs }}
  displayName: 'Configure'
  
- bash: |
    set -x
    #
    cd $(Build.SourcesDirectory)/build
    make `cat num_jobs || true` \
      ${{ parameters.toolchainTargets }}
  displayName: 'Build toolchain'

- bash: |
    set -x
    #
    cd $(Build.SourcesDirectory)/build
    make `cat num_jobs || true` \
      toolchain-info${{ parameters.targetSuffix}} \
      openorienteering-mapper-ci${{ parameters.targetSuffix }}
    #
    cd $(Build.SourcesDirectory)
    TARGET=`echo default${{ parameters.targetSuffix }} | sed -e 's,^default-,,'`
    MAPPER_DIR=build/${TARGET}/openorienteering-mapper-ci
    if [ -f "${MAPPER_DIR}/Testing/TAG" ]; then
      python ci/ctest_to_junit.py "${MAPPER_DIR}"
      echo "##vso[task.setVariable variable=TEST_RESULTS]$(Build.SourcesDirectory)/${MAPPER_DIR}/Testing"
    fi
    #
    cd $(Build.SourcesDirectory)
    mkdir output
    case "${{ parameters.imageName }}${{ parameters.targetSuffix }}" in
      ubuntu-*-mingw32)
        cp build/${TARGET}/openorienteering-mapper-ci/OpenOrienteering-Mapper-*.zip output/ && \
        echo "##vso[task.setVariable variable=ARTIFACT_NAME]Mapper${{ parameters.targetSuffix }}"
        ;;
      ubuntu-*)
        cp build/default/openorienteering-mapper-ci/OpenOrienteering-Mapper-*.deb output/ && \
        echo "##vso[task.setVariable variable=ARTIFACT_NAME]Mapper-${{ parameters.imageName }}"
        ;;
      macos-*-*android*)
        cp build/${TARGET}/openorienteering-mapper-ci/packaging/Mapper/install/build/outputs/apk/debug/*.apk output/ && \
        echo "##vso[task.setVariable variable=ARTIFACT_NAME]Mapper${{ parameters.targetSuffix }}"
        ;;
      macos-*)
        cp build/default/openorienteering-mapper-ci/OpenOrienteering-Mapper-*.dmg output/ && \
        echo "##vso[task.setVariable variable=ARTIFACT_NAME]Mapper-${{ parameters.imageName }}"
        ;;
    esac
  env:
    CTEST_OUTPUT_ON_FAILURE: 1
    DYLD_LIBRARY_PATH: $(Build.SourcesDirectory)/build/default/install/lib
    LD_LIBRARY_PATH: $(Build.SourcesDirectory)/build/default/install/lib
    VERBOSE: 1
    ${{ if eq(parameters.mode, 'clazy') }}:
      CLAZY_CHECKS: 'level0,level1,no-rule-of-two-soft,no-const-signal-or-slot,no-fully-qualified-moc-types'
      CLAZY_IGNORE_DIRS: '.*printsupport.qt-5.*'
      CLAZY_NO_WERROR: 1
  displayName: 'Build Mapper'

- task: PublishTestResults@2
  inputs:
    testRunner: 'jUnit'
    testResultsFiles: '*/jUnit.xml'
    searchFolder: '$(TEST_RESULTS)'
  condition: variables.TEST_RESULTS
  displayName: 'Publish test results'

- task: PublishPipelineArtifact@0
  inputs:
    artifactName: '$(ARTIFACT_NAME)'
    targetPath: $(Build.SourcesDirectory)/output
